// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JoystickControl_GetRawInputDevices_FullMethodName = "/JoystickControl.JoystickControl/getRawInputDevices"
	JoystickControl_GetSerialPorts_FullMethodName     = "/JoystickControl.JoystickControl/getSerialPorts"
	JoystickControl_GetConfig_FullMethodName          = "/JoystickControl.JoystickControl/getConfig"
	JoystickControl_SetConfig_FullMethodName          = "/JoystickControl.JoystickControl/setConfig"
	JoystickControl_ValidateConfig_FullMethodName     = "/JoystickControl.JoystickControl/validateConfig"
	JoystickControl_StartMixer_FullMethodName         = "/JoystickControl.JoystickControl/startMixer"
	JoystickControl_StopMixer_FullMethodName          = "/JoystickControl.JoystickControl/stopMixer"
)

// JoystickControlClient is the client API for JoystickControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoystickControlClient interface {
	GetRawInputDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRawInputDevicesRes, error)
	GetSerialPorts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSerialPortsRes, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigRes, error)
	SetConfig(ctx context.Context, in *SetConfigReq, opts ...grpc.CallOption) (*Empty, error)
	ValidateConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ValidateConfigRes, error)
	StartMixer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StopMixer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type joystickControlClient struct {
	cc grpc.ClientConnInterface
}

func NewJoystickControlClient(cc grpc.ClientConnInterface) JoystickControlClient {
	return &joystickControlClient{cc}
}

func (c *joystickControlClient) GetRawInputDevices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetRawInputDevicesRes, error) {
	out := new(GetRawInputDevicesRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetRawInputDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetSerialPorts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSerialPortsRes, error) {
	out := new(GetSerialPortsRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetSerialPorts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetConfigRes, error) {
	out := new(GetConfigRes)
	err := c.cc.Invoke(ctx, JoystickControl_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) SetConfig(ctx context.Context, in *SetConfigReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) ValidateConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ValidateConfigRes, error) {
	out := new(ValidateConfigRes)
	err := c.cc.Invoke(ctx, JoystickControl_ValidateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) StartMixer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_StartMixer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joystickControlClient) StopMixer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, JoystickControl_StopMixer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoystickControlServer is the server API for JoystickControl service.
// All implementations must embed UnimplementedJoystickControlServer
// for forward compatibility
type JoystickControlServer interface {
	GetRawInputDevices(context.Context, *Empty) (*GetRawInputDevicesRes, error)
	GetSerialPorts(context.Context, *Empty) (*GetSerialPortsRes, error)
	GetConfig(context.Context, *Empty) (*GetConfigRes, error)
	SetConfig(context.Context, *SetConfigReq) (*Empty, error)
	ValidateConfig(context.Context, *Empty) (*ValidateConfigRes, error)
	StartMixer(context.Context, *Empty) (*Empty, error)
	StopMixer(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedJoystickControlServer()
}

// UnimplementedJoystickControlServer must be embedded to have forward compatible implementations.
type UnimplementedJoystickControlServer struct {
}

func (UnimplementedJoystickControlServer) GetRawInputDevices(context.Context, *Empty) (*GetRawInputDevicesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawInputDevices not implemented")
}
func (UnimplementedJoystickControlServer) GetSerialPorts(context.Context, *Empty) (*GetSerialPortsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSerialPorts not implemented")
}
func (UnimplementedJoystickControlServer) GetConfig(context.Context, *Empty) (*GetConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedJoystickControlServer) SetConfig(context.Context, *SetConfigReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedJoystickControlServer) ValidateConfig(context.Context, *Empty) (*ValidateConfigRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateConfig not implemented")
}
func (UnimplementedJoystickControlServer) StartMixer(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMixer not implemented")
}
func (UnimplementedJoystickControlServer) StopMixer(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMixer not implemented")
}
func (UnimplementedJoystickControlServer) mustEmbedUnimplementedJoystickControlServer() {}

// UnsafeJoystickControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoystickControlServer will
// result in compilation errors.
type UnsafeJoystickControlServer interface {
	mustEmbedUnimplementedJoystickControlServer()
}

func RegisterJoystickControlServer(s grpc.ServiceRegistrar, srv JoystickControlServer) {
	s.RegisterService(&JoystickControl_ServiceDesc, srv)
}

func _JoystickControl_GetRawInputDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetRawInputDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetRawInputDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetRawInputDevices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetSerialPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetSerialPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetSerialPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetSerialPorts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).SetConfig(ctx, req.(*SetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_ValidateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).ValidateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_ValidateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).ValidateConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_StartMixer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).StartMixer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_StartMixer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).StartMixer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _JoystickControl_StopMixer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoystickControlServer).StopMixer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JoystickControl_StopMixer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoystickControlServer).StopMixer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// JoystickControl_ServiceDesc is the grpc.ServiceDesc for JoystickControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JoystickControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "JoystickControl.JoystickControl",
	HandlerType: (*JoystickControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRawInputDevices",
			Handler:    _JoystickControl_GetRawInputDevices_Handler,
		},
		{
			MethodName: "getSerialPorts",
			Handler:    _JoystickControl_GetSerialPorts_Handler,
		},
		{
			MethodName: "getConfig",
			Handler:    _JoystickControl_GetConfig_Handler,
		},
		{
			MethodName: "setConfig",
			Handler:    _JoystickControl_SetConfig_Handler,
		},
		{
			MethodName: "validateConfig",
			Handler:    _JoystickControl_ValidateConfig_Handler,
		},
		{
			MethodName: "startMixer",
			Handler:    _JoystickControl_StartMixer_Handler,
		},
		{
			MethodName: "stopMixer",
			Handler:    _JoystickControl_StopMixer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
